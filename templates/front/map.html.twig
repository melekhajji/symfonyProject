{% extends 'base.html.twig' %}
{% block title %}Map des Events{% endblock %}
{% block container %}
    {% block name %}Map des Events{% endblock %}

<div class="main">
    <html>
    <head>
        <meta charset="utf-8">
        <!-- Nous chargeons les fichiers CDN de Leaflet. Le CSS AVANT le JS -->
        <link rel="stylesheet" href="https://unpkg.com/leaflet@1.3.1/dist/leaflet.css" integrity="sha512-Rksm5RenBEKSKFjgI3a41vrjkw4EVPlJ3+OiI65vTjIdo9brlAacEuKOiQ5OFh7cOI1bkDwLqdLw3Zg0cRJAAQ==" crossorigin="" />
        <link rel="stylesheet" type="text/css" href="https://unpkg.com/leaflet.markercluster@1.3.0/dist/MarkerCluster.css" />
        <link rel="stylesheet" type="text/css" href="https://unpkg.com/leaflet.markercluster@1.3.0/dist/MarkerCluster.Default.css" />



        <!-- css -->
        <style type="text/css">
            #map{ /* la carte DOIT avoir une hauteur sinon elle n'apparaît pas */
                height:400px;
            }
        </style>
        <title>Carte</title>
    </head>
    <body>
    <div id="map">

    </div>

    <!-- Fichiers Javascript -->
    <script src="https://unpkg.com/leaflet@1.3.1/dist/leaflet.js" integrity="sha512-/Nsx9X4HebavoBvEBuyp3I7od5tA0UzAxs+j83KgC8PU0kgB4XiK4Lfe4y4cgBtaRJQEIFCW+oC506aPT2L1zw==" crossorigin=""></script>
    <script type='text/javascript' src='https://unpkg.com/leaflet.markercluster@1.3.0/dist/leaflet.markercluster.js'></script>

    <script type="text/javascript">
        // On initialise la latitude et la longitude de Tunisie (centre de la carte)
        var lat =  34.150000;
        var lon = 9.270000;
        var macarte = null;
        // Fonction d'initialisation de la carte
        function initMap() {
            var tableauMarqueurs = []; // Nous initialisons la liste des marqueurs
            // Créer l'objet "macarte" et l'insèrer dans l'élément HTML qui a l'ID "map"
            macarte = L.map('map').setView([lat, lon], 6);
            // Leaflet ne récupère pas les cartes (tiles) sur un serveur par défaut. Nous devons lui préciser où nous souhaitons les récupérer. Ici, openstreetmap.fr
            L.tileLayer('https://{s}.tile.openstreetmap.fr/osmfr/{z}/{x}/{y}.png', {
                // Il est toujours bien de laisser le lien vers la source des données
                attribution: 'données © <a href="//osm.org/copyright">OpenStreetMap</a>/ODbL - rendu <a href="//openstreetmap.fr">OSM France</a>',
                minZoom: 1,
                maxZoom: 30
            }).addTo(macarte);

            marqueurs = L.markerClusterGroup(); // Nous initialisons les groupes de marqueurs

            // parcourir les dff villes des events
            {% for event in events %}

            // on personnalise le marqueur
// Nous définissons l'icône à utiliser pour le marqueur, sa taille affichée (iconSize), sa position (iconAnchor) et le décalage de son ancrage (popupAnchor)
            var myIcon = L.icon({
                iconUrl: "backoffice/img/icons/icone.png",
                iconSize: [50, 50],
                iconAnchor: [25, 50],
                //deplacer popup avec icone
                popupAnchor: [-3, -76],
            });

            // Nous ajoutons un marqueur ARIANA et lui attribue une popup
            var marker = L.marker([{{event.lat}}, {{event.lon}}], { icon: myIcon });// pas de addTo(macarte), l'affichage sera géré par la bibliothèque des clusters
            marker.bindPopup("<h1>{{ event.lieu }},{{ event.title }}</>");
            marqueurs.addLayer(marker); // Nous ajoutons le marqueur aux groupes
            tableauMarqueurs.push(marker); // Nous ajoutons le marqueur à la liste des marqueurs

            {% endfor %}
            var group = new L.featureGroup(tableauMarqueurs); // Nous créons le groupe des marqueurs pour adapter le zoom
            macarte.fitBounds(group.getBounds().pad(0.5)); // Nous demandons à ce que tous les marqueurs soient visibles, et ajoutons un padding (pad(0.5)) pour que les marqueurs ne soient pas coupés
            macarte.addLayer(marqueurs);
        }
        window.onload = function(){
            // Fonction d'initialisation qui s'exécute lorsque le DOM est chargé
            initMap();
        };

    </script>
    </body>
    </html>
    {% endblock %}
